#Grāmatnīcas inventāra pārvaldības sistēma
     #Ar Tkinter GUI un datu saglabāšana/ielādēšana no JSON faila

import tkinter as tk
from tkinter import messagebox, simpledialog, ttk
import json
import os


#Faila konfigurācija
DATA_FILE = "stock.json"

#Datu saglabāšana/ielāde
def load_data():
    """Ielādē datus no JSON faila! (ja tāds eksistē)"""
    global stock
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                stock = json.load(f)
        except json.JSONDecodeError:
            messagebox.showerror("୨୧ ‧₊ KĻŪDA", "Inventāra datne ir bojāta... Tiek izveidots jauns saraksts!")
            stock = {}
    else:
        stock = {
            "9780765377135": {"title": "Mistborn #1", "author": "Sanderson Brandon", "price": 19.99, "quantity": 12},
            "9780007351053": {"title": "The Picture of Dorian Gray", "author": "Wilde Oscar", "price": 3.50, "quantity": 3},
            "9780356519142": {"title": "Emily Wilde's Encyclopaedia of Faeries", "author": "Fawcett Heather", "price": 10.95, "quantity": 5},
            "9781471407277": {"title": "The Cruel Prince", "author": "Black Holly", "price": 11.95, "quantity": 1},
            "9781408891384": {"title": "The Song of Achilles", "author": "Madeline Miller", "price": 9.90, "quantity": 4},
            "9781908670427": {"title": "Soviet Milk", "author": "Ikstena Nora", "price": 15.95, "quantity": 15}
        }

def save_data():
    pass
    """Saglabā pašreizējos datus JSON failā!"""
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(stock, f, indent=4, ensure_ascii=False)

#GUI darbības funckijas
def refresh_table():
    """Atjauno/refresh tabulu ar visām grāmatām!"""
    for row in tree.get_children():
        tree.delete(row)
    for isbn, book in stock.items():
        tree.insert("", "end", values=(isbn, book["title"], book["author"], f"€{book['price']}", book["quantity"]))

def add_book():
    """Pievieno jaunu grāmatu!"""
    add_win = tk.Toplevel(root)
    add_win.title("✧˖°.Pievienot grāmatu")
    add_win.geometry("600x400")
    add_win.configure(bg="#FFBBE1")

    def labeled_entry(parent, text):
        frame = tk.Frame(parent, bg="#FFBBE1")
        frame.pack(pady=3)
        tk.Label(frame, text=text, bg="#FFBBE1", fg="#211832", font=("Times New Roman", 12, "bold")).pack()
        entry = tk.Entry(frame, width=30)
        entry.pack()
        return entry

    isbn_entry = labeled_entry(add_win, "☆ ISBN:")
    title_entry = labeled_entry(add_win, "☆ Nosaukums:")
    author_entry = labeled_entry(add_win, "☆ Autors:")
    price_entry = labeled_entry(add_win, "☆ Cena (€):")
    quantity_entry = labeled_entry(add_win, "☆ Daudzums:")

    def save_book():
        isbn = isbn_entry.get().strip()
        if not isbn:
            messagebox.showerror("୨୧ ‧₊ KĻŪDA", "ISBN lauks nevar būt tukšs!")
            return
        if isbn in stock:
            messagebox.showerror("୨୧ ‧₊ KĻŪDA", "Grāmata ar šo ISBN jau eksistē!")
            return
        try:
            price = float(price_entry.get())
            quantity = int(quantity_entry.get())
        except ValueError:
            messagebox.showerror("୨୧ ‧₊ KĻŪDA", "Cena un daudzums jāievada skaitļos!")
            return

        stock[isbn] = {
            "title": title_entry.get(),
            "author": author_entry.get(),
            "price": price,
            "quantity": quantity
        }
        save_data()
        messagebox.showinfo("✧˖°.Veiksmīgi", f"Grāmata '{title_entry.get()}' pievienota!")
        add_win.destroy()
        refresh_table()

    tk.Button(add_win, text="✧˖°.Saglabāt", command=save_book,
              bg="#DD7BDF", fg="white", font=("Times New Roman", 12, "bold"),
              relief="raised", width=15).pack(pady=15)

def search_book():
    """Meklē grāmatu pēc ISBN, nosaukuma vai autora!"""
    query = simpledialog.askstring("✧˖°.Meklēt", "Ievadiet ISBN, nosaukumu vai autoru:")
    if not query:
        return
    results = []
    for isbn, book in stock.items():
        if query.lower() in isbn.lower() or query.lower() in book["title"].lower() or query.lower() in book["author"].lower():
            results.append((isbn, book))
    if results:
        result_text = "\n\n".join([
            f"{b['title']} ({b['author']})\nISBN: {i}, Cena: €{b['price']}, Daudzums: {b['quantity']}"
            for i, b in results
        ])
        messagebox.showinfo("✧˖°Rezultāti", result_text)
    else:
        messagebox.showwarning("୨୧ ‧₊ Nav atrasts", "Neviena grāmata neatbilst meklēšanai!")

def delete_book():
    """Dzēš izvēlēto grāmatu pēc ISBN!"""
    selected = tree.focus()
    if not selected:
        messagebox.showwarning("୨୧ ‧₊ Brīdinājums", "Lūdzu, izvēlieties grāmatu, kuru dzēst!")
        return
    values = tree.item(selected, "values")
    isbn = values[0]
    if messagebox.askyesno("୨୧ ‧₊ Apstiprinājums", f"Vai tiešām dzēst grāmatu ar ISBN {isbn}?"):
        del stock[isbn]
        save_data()
        refresh_table()
        messagebox.showinfo("✧˖° Dzēsts", "Grāmata veiksmīgi izdzēsta!")
        
#Galvenais logs/main menu
root = tk.Tk()
root.title("✧˖°✧˖°GRĀMATNĪCAS INVENTĀRA SISTĒMA✧˖°✧˖°")
root.geometry("1050x550")
root.configure(bg="#FFBBE1")

#Tabulas stils/dizains
style = ttk.Style()
style.theme_use("clam")
style.configure("Treeview",
                background="#B3BFFF",
                foreground="#211832",
                rowheight=25,
                fieldbackground="#B3BFFF",
                font=("Times New Roman", 12))
style.configure("Treeview.Heading",
                background="#DD7BDF",
                foreground="white",
                font=("Times New Roman", 12, "bold"))
style.map("Treeview",
          background=[("selected", "#FFF58A")])

#Tabula/table
columns = ("ISBN", "Nosaukums", "Autors", "Cena", "Daudzums")
tree = ttk.Treeview(root, columns=columns, show="headings")
for col in columns:
    tree.heading(col, text=col)
    tree.column(col, anchor="center")
tree.pack(fill="both", expand=True, pady=10, padx=10)

#Pogas/buttons
frame = tk.Frame(root)
frame.pack(pady=10)
btn_style = {"bg": "#DD7BDF", "fg": "white", "font": ("Times New Roman", 12, "bold"), "width": 18, "height": 1}
tk.Button(frame, text="+ Pievienot grāmatu", command=add_book, **btn_style).grid(row=0, column=0, padx=6, pady=5)
tk.Button(frame, text="⌕ Meklēt grāmatu", command=search_book, **btn_style).grid(row=0, column=1, padx=6, pady=5)
tk.Button(frame, text="× Dzēst grāmatu", command=delete_book, **btn_style).grid(row=0, column=2, padx=6, pady=5)
tk.Button(frame, text="↻ Atjaunot sarakstu", command=refresh_table, **btn_style).grid(row=0, column=3, padx=6, pady=5)
tk.Button(frame, text="୨୧ ‧₊ Iziet", command=lambda: (save_data(), root.destroy()), **btn_style).grid(row=0, column=4, padx=6, pady=5)

#Ielādēt datus un parādīt tabulā
load_data()
refresh_table()

root.mainloop()
